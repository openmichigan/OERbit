<?php

/**
 * @defgroup print Printer, email and PDF versions
 *
 * Welcome to the print module developer's documentation. The interesting
 * functions for themers are those that start with 'theme_'.
 *
 * - Printer-friendly pages
 *   - @link print.module Module main file @endlink
 *   - @link print.admin.inc Settings form @endlink
 *   - @link print.pages.inc HTML generation @endlink
 *   - @link print.install (Un)Install routines @endlink
 *   - @link print.tpl.php Page generation template @endlink
 * - Send by email
 *   - @link print_mail.module Module main file @endlink
 *   - @link print_mail.admin.inc Settings form @endlink
 *   - @link print_mail.inc Mail form and send mail routine @endlink
 *   - @link print_mail.install (Un)Install routines @endlink
 * - PDF version
 *   - @link print_pdf.module Module main file @endlink
 *   - @link print_pdf.admin.inc Settings form @endlink
 *   - @link print_pdf.pages.inc PDF generation @endlink
 *   - @link print_pdf.class.inc Auxiliary PHP5 class @endlink
 *   - @link print_pdf.class_php4.inc Auxiliary PHP4 class @endlink
 *   - @link print_pdf.install (Un)Install routines @endlink
 */

/**
 * @file
 * Displays Printer-friendly versions of Drupal pages.
 *
 * This is the core module of the PF package, with the Drupal hooks
 * and other administrative functions.
 *
 * @ingroup print
 */

define('PRINT_PATH', 'print');

define('PRINT_HTML_FORMAT', 'html');

define('PRINT_LOGO_OPTIONS_DEFAULT', 1);
define('PRINT_LOGO_URL_DEFAULT', '');
define('PRINT_FOOTER_OPTIONS_DEFAULT', 1);
define('PRINT_FOOTER_USER_DEFAULT', '');
define('PRINT_CSS_DEFAULT', '');
define('PRINT_KEEP_THEME_CSS_DEFAULT', 0);
define('PRINT_URLS_DEFAULT', 1);
define('PRINT_URLS_ANCHORS_DEFAULT', 0);
define('PRINT_COMMENTS_DEFAULT', 0);
define('PRINT_NEWWINDOW_DEFAULT', 1);

define('PRINT_HTML_LINK_POS_DEFAULT', serialize(array('link' => 'link', 'block' => 'block', 'help' => 'help')));
define('PRINT_HTML_LINK_TEASER_DEFAULT', 0);
define('PRINT_HTML_SHOW_LINK_DEFAULT', 1);
define('PRINT_HTML_NODE_LINK_VISIBILITY_DEFAULT', 0);
define('PRINT_HTML_NODE_LINK_PAGES_DEFAULT', '');
define('PRINT_HTML_LINK_CLASS_DEFAULT', 'print-page');
define('PRINT_HTML_SYS_LINK_VISIBILITY_DEFAULT', 1);
define('PRINT_HTML_SYS_LINK_PAGES_DEFAULT', '');
define('PRINT_HTML_LINK_USE_ALIAS_DEFAULT', 0);
define('PRINT_HTML_BOOK_LINK_DEFAULT', 1);
define('PRINT_HTML_NEW_WINDOW_DEFAULT', 0);
define('PRINT_HTML_SENDTOPRINTER_DEFAULT', 0);
define('PRINT_HTML_WINDOWCLOSE_DEFAULT', 1);

define('PRINT_SOURCEURL_ENABLED_DEFAULT', 1);
define('PRINT_SOURCEURL_DATE_DEFAULT', 0);
define('PRINT_SOURCEURL_FORCENODE_DEFAULT', 0);

define('PRINT_ROBOTS_NOINDEX_DEFAULT', 1);
define('PRINT_ROBOTS_NOFOLLOW_DEFAULT', 1);
define('PRINT_ROBOTS_NOARCHIVE_DEFAULT', 0);

define('PRINT_TYPE_SHOW_LINK_DEFAULT', 1);
define('PRINT_TYPE_COMMENT_LINK_DEFAULT', 0);
define('PRINT_TYPE_URLLIST_DEFAULT', 1);
define('PRINT_TYPE_SYS_URLLIST_DEFAULT', 0);

define('PRINT_ALLOW_NORMAL_LINK', 1);
define('PRINT_ALLOW_BOOK_LINK', 2);
define('PRINT_TYPE_FIELDS_WEIGHT', 30);

/**
 * Implementation of hook_perm().
 */
function print_perm() {
  return array('access print', 'administer print', 'node-specific print configuration', 'use PHP for link visibility');
}

/**
 * Implementation of hook_theme().
 */
function print_theme() {
  return array(
    'print_format_link' => array(
      'arguments' => array(),
    ),
    'print_node' => array(
      'arguments' => array('node' => NULL, 'teaser' => FALSE, 'page' => FALSE, 'type' => PRINT_HTML_FORMAT),
      'template' => 'print_node',
    ),
    'print_page' => array(
      'arguments' => array('print' => NULL, 'type' => PRINT_HTML_FORMAT, 'node' => NULL),
      'template' => 'print',
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function print_theme_registry_alter(&$theme_registry) {
  $theme_registry['print_node']['theme paths'] = array_merge($theme_registry['print_node']['theme paths'], $theme_registry['node']['theme paths']);
  $theme_registry['print_page']['theme paths'] = array_merge($theme_registry['print_page']['theme paths'], $theme_registry['page']['theme paths']);
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function print_preprocess_print_node(&$variables) {
  static $hooks = NULL;
  if (!isset($hooks)) {
    init_theme();
    $hooks = theme_get_registry();
  }

  // Stolen from theme() so that ALL preprocess functions are called
  $info = $hooks['node'];
  if (isset($info['preprocess functions']) && is_array($info['preprocess functions'])) {
    // This construct ensures that we can keep a reference through
    // call_user_func_array.
    $args = array(&$variables, 'node');
    foreach ($info['preprocess functions'] as $preprocess_function) {
      if (function_exists($preprocess_function)) {
        call_user_func_array($preprocess_function, $args);
      }
    }
  }
  $variables += $args[0];

  // Include the right template suggestions based on format (print, email) and type.
  $format = $variables['type'];
  $type = $variables['node']->type;

  $variables['template_files'][] = "node";
  $variables['template_files'][] = "node-$type";
  $variables['template_files'][] = "print_node";
  $variables['template_files'][] = "print_node_$format";
  $variables['template_files'][] = "print_node_$format.node-$type";
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function print_preprocess_print_page(&$variables) {
  static $hooks = NULL;
  if (!isset($hooks)) {
    init_theme();
    $hooks = theme_get_registry();
  }

  $variables['show_blocks'] = FALSE;
  $variables['show_messages'] = FALSE;

  // Stolen from theme() so that ALL preprocess functions are called
  $info = $hooks['page'];
  if (isset($info['preprocess functions']) && is_array($info['preprocess functions'])) {
    // This construct ensures that we can keep a reference through
    // call_user_func_array.
    $args = array(&$variables, 'page');
    foreach ($info['preprocess functions'] as $preprocess_function) {
      if (function_exists($preprocess_function)) {
        call_user_func_array($preprocess_function, $args);
      }
    }
  }
  $variables += $args[0];

  $format = $variables['type'];
  $type = (isset($variables['node']->type)) ? $variables['node']->type : '';
  $nid = (isset($variables['node']->nid)) ? $variables['node']->nid : '';

  $variables['template_files'][] = "print";
  $variables['template_files'][] = "print.node-$type";
  $variables['template_files'][] = "print.node-$type-$nid";
  $variables['template_files'][] = "print_$format";
  $variables['template_files'][] = "print_$format.node-$type";
  $variables['template_files'][] = "print_$format.node-$type-$nid";
}

/**
 * Implementation of hook_menu().
 */
function print_menu() {
  $items = array();

  $items[PRINT_PATH] = array(
    'title' => 'Printer-friendly',
    'page callback' => 'print_controller_html',
    'access arguments' => array('access print'),
    'type' => MENU_CALLBACK,
    'file' => 'print.pages.inc',
  );
  $items[PRINT_PATH .'/'. PRINT_PATH] = array(
    'access callback' => FALSE,
  );
  $items['admin/settings/print'] = array(
    'title' => 'Printer, email and PDF versions',
    'description' => 'Adds a printer-friendly version link to content and administrative pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_html_settings'),
    'access arguments'  => array('administer print'),
    'file' => 'print.admin.inc',
  );
  $items['admin/settings/print/html'] = array(
    'title' => 'Web page',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/print/html/options'] = array(
    'title' => 'Options',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/print/html/strings'] = array(
    'title' => 'Text strings',
    'description' => 'Override the user-facing strings used in the printer-friendly version.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_html_strings_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );
  $items['admin/settings/print/common'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the common functionalities for all the print sub-modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_main_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );
  $items['admin/settings/print/common/options'] = array(
    'title' => 'Options',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/print/common/strings'] = array(
    'title' => 'Text strings',
    'description' => 'Override the user-facing strings used by the print module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_main_strings_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function print_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Printer, email and PDF versions');
      $block[0]['cache'] = BLOCK_CACHE_PER_PAGE;
      $block[1]['info'] = t('Most printed');
      $block[1]['cache'] = BLOCK_CACHE_GLOBAL;
      return $block;
      break;
    case 'configure':
      return '';
    case 'save':
      return;
    case 'view':
      switch ($delta) {
        case 0:
          $nid = preg_replace('!^node/!', '', $_GET['q']);
          if (ctype_digit($nid)) {
            $node = node_load($nid);
            if (!node_access('view', $node)) {
              // If the user doesn't have access to the node, don't show any links
              $block['content'] = '';
              return;
            }
          }
          else {
            $node = NULL;
          }
          $block['content'] = '';
          foreach (array('html' => 'print', 'mail' => 'print_mail', 'pdf' => 'print_pdf') as $format => $module) {
            $link_pos = variable_get('print_' . $format . '_link_pos', unserialize(PRINT_HTML_LINK_POS_DEFAULT));

            if (!(empty($link_pos['block']))) {
              $func = $module . '_insert_link';

              if (function_exists($func)) {
                $links = $func(NULL, $node);
                  if (!empty($links)) {
                    $block['content'] .= $links;
                }
              }
            }
          }
          break;
        case 1:
          $block['subject'] = t('Most printed');
          $result = db_query_range("SELECT path FROM {print_page_counter} LEFT JOIN {node} n ON path = CONCAT('node/', n.nid) WHERE status <> 0 OR status IS NULL ORDER BY totalcount DESC", 0, 3);
          if (db_affected_rows()) {
            $block['content'] = '<div class="item-list"><ul>';
            while ($obj = db_fetch_object($result)) {
              $block['content'] .= '<li>'. l(_print_get_title($obj->path), $obj->path) .'</li>';
            }
            $block['content'] .= '</ul></div>';
          }
          break;
      }
      return $block;
      break;
    }
}

/**
 * Implementation of hook_link().
 */
function print_link($type, $node = NULL, $teaser = FALSE) {
  $print_html_link_pos = variable_get('print_html_link_pos', unserialize(PRINT_HTML_LINK_POS_DEFAULT));
  $print_html_link_use_alias = variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT);
  $allowed_type = print_link_allowed(array('type' => $type, 'node' => $node, 'teaser' => $teaser));
  if (($allowed_type === PRINT_ALLOW_NORMAL_LINK) && !isset($node->book) && !empty($print_html_link_pos['link'])) {
    drupal_add_css(drupal_get_path('module', 'print') .'/css/printlinks.css');
    $links = array();
    $format = theme('print_format_link');

    $query_arr = $_GET;
    if ($type == 'comment') {
      $query_arr['comment'] = $node->cid;
    }
    $query = print_query_string_encode($query_arr, array('q'));
    if (empty($query)) $query = NULL;

    if (($print_html_link_use_alias) && ($alias = drupal_lookup_path('alias', 'node/'. $node->nid))) {
      $path = $alias;
    }
    else {
      $path = $node->nid;
    }

    $links['print_html'] = array(
      'href' => PRINT_PATH .'/'. $path,
      'title' => $format['text'],
      'attributes' => $format['attributes'],
      'html' => $format['html'],
      'query' => $query,
    );

    return $links;
  }
  else {
    return;
  }
}

/**
 * Implementation of hook_link_alter().
 */
function print_link_alter(&$links, $node) {
  foreach ($links as $module => $link) {
    if (strpos($module, 'book_printer') !== FALSE) {
      $print_html_book_link = variable_get('print_html_book_link', PRINT_HTML_BOOK_LINK_DEFAULT);

      if ($print_html_book_link) {
        $print_html_link_pos = variable_get('print_html_link_pos', unserialize(PRINT_HTML_LINK_POS_DEFAULT));

        if (!empty($print_html_link_pos['link'])) {
        $format = theme('print_format_link');

        switch ($print_html_book_link) {
          case 1:
            $path = $link['href'];
            break;
          case 2:
            $print_html_link_use_alias = variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT);
            $path = ($print_html_link_use_alias && isset($node->path)) ? $node->path : $node->nid;
            break;
        }

        $links[$module] = array(
          'href' => PRINT_PATH .'/'. $path,
          'title' => $format['text'],
          'attributes' => $format['attributes'],
          'html' => $format['html'],
        );
        }
        else {
          unset($links[$module]);
        }
      }
    }
  }
}

/**
 * Implementation of hook_help().
 */
function print_help($path, $arg) {
  switch ($path) {
    case 'admin/help#print':
      // Return a line-break version of the module README
      return filter_filter('process', 1, NULL, file_get_contents(drupal_get_path('module', 'print') .'/README.txt') );
  }

  $print_html_link_pos = variable_get('print_html_link_pos', unserialize(PRINT_HTML_LINK_POS_DEFAULT));
  if (($path !== 'node/%') && !(empty($print_html_link_pos['help']))) {
    static $output = FALSE;

    if ($output === FALSE) {
      $output = TRUE;

      $link = print_insert_link();
      if ($link) {
        return "<span class='print-syslink'>$link</span>";
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function print_nodeapi(&$node, $op = 'view', $teaser, $page) {
  switch ($op) {
    case 'view':
      // Insert content corner links
      if ((!$teaser) && isset($node->build_mode) && ($node->build_mode === NODE_BUILD_NORMAL)) {
      $node->content['print_links'] = array(
        '#prefix' => '<span class="print-link">',
        '#value' => '',
        '#suffix' => '</span>',
        '#weight' => -101,
      );
      $print_html_link_pos = variable_get('print_html_link_pos', unserialize(PRINT_HTML_LINK_POS_DEFAULT));
      if (!empty($print_html_link_pos['corner'])) {
        $node->content['print_links']['#value'] .= print_insert_link(NULL, $node);
      }
      }
      break;
    case 'load':
      $res = db_fetch_object(db_query("SELECT link, comments, url_list FROM {print_node_conf} WHERE nid = %d", $node->nid));

      $node->print_display = $res ? intval($res->link) : variable_get('print_display_'. $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
      $node->print_display_comment = $res ? intval($res->comments) : variable_get('print_display_comment_'. $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      $node->print_display_urllist = $res ? intval($res->url_list) : variable_get('print_display_urllist_'. $node->type, PRINT_TYPE_URLLIST_DEFAULT);
      break;
    case 'insert':
    case 'update':
      if (user_access('administer print') || user_access('node-specific print configuration')) {
        if (!isset($node->print_display)) $node->print_display = variable_get('print_display_'. $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
        if (!isset($node->print_display_comment)) $node->print_display_comment = variable_get('print_display_comment_'. $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
        if (!isset($node->print_display_urllist)) $node->print_display_urllist = variable_get('print_display_urllist_'. $node->type, PRINT_TYPE_URLLIST_DEFAULT);

        _print_node_conf_modify($node->nid, $node->print_display, $node->print_display_comment, $node->print_display_urllist);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {print_node_conf} WHERE nid = %d", $node->nid);
      db_query("DELETE FROM {print_page_counter} WHERE path = 'node/%d'", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function print_form_alter(&$form, $form_state, $form_id) {
  // Add the node-type settings option to activate the printer-friendly version link
  if ((user_access('administer print') || user_access('node-specific print configuration')) && (($form_id == 'node_type_form') ||
      (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id))) {
    $form['print'] = array(
      '#type' => 'fieldset',
      '#title' => t('Printer, email and PDF versions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => (function_exists('content_extra_field_weight') && isset($form['type'])) ? content_extra_field_weight($form['type']['#value'], 'print') : PRINT_TYPE_FIELDS_WEIGHT,
      '#group' => 'additional_settings',
    );

    $form['print']['label'] = array(
      '#type' => 'markup',
      '#value' => '<p><strong>'. t('Printer-friendly version') .'</strong></p>',
    );

    $form['print']['print_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show link'),
    );
    $form['print']['print_display_comment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show link in individual comments'),
    );
    $form['print']['print_display_urllist'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Printer-friendly URLs list'),
    );

    if ($form_id == 'node_type_form') {
      $form['print']['print_display']['#default_value'] = variable_get('print_display_'. $form['#node_type']->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
      $form['print']['print_display_comment']['#default_value'] = variable_get('print_display_comment_'. $form['#node_type']->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      $form['print']['print_display_urllist']['#default_value'] = variable_get('print_display_urllist_'. $form['#node_type']->type, PRINT_TYPE_URLLIST_DEFAULT);
    }
    else {
      $node = $form['#node'];
      $form['print']['print_display']['#default_value'] = isset($node->print_display) ? $node->print_display : variable_get('print_display_'. $node->type, PRINT_TYPE_SHOW_LINK_DEFAULT);
      $form['print']['print_display_comment']['#default_value'] = isset($node->print_display_comment) ? $node->print_display_comment : variable_get('print_display_comment_'. $node->type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      $form['print']['print_display_urllist']['#default_value'] = isset($node->print_display_urllist) ? $node->print_display_urllist : variable_get('print_display_urllist_'. $node->type, PRINT_TYPE_URLLIST_DEFAULT);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function print_content_extra_fields($type_name) {
  $fields['print'] = array(
    'label' => t('Printer, email and PDF versions'),
    'description' => t('Print module form.'),
    'weight' => PRINT_TYPE_FIELDS_WEIGHT,
  );
  return $fields;
}

/**
 * Implementation of hook_content_build_modes().
 */
function print_content_build_modes() {
  return array(
    'print' => array(
      'title' => t('Print'),
      'build modes' => array(
        NODE_BUILD_PRINT => array(
          'title' => t('Print'),
          'views style' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Auxiliary function to discover a given page's title
 *
 * @param $path
 *   path of the page being identified
 * @return
 *   string with the page's title
 */
function _print_get_title($path) {
  $path = drupal_get_normal_path($path);
  $nid = preg_replace('!^node/!', '', $path);
  if (ctype_digit($nid)) {
    $res = db_fetch_object(db_query("SELECT title FROM {node} WHERE nid = %d", $nid));
    return $res->title;
  }
  else {
    // Not a node, try to get title from the menu system
    $menu_item = menu_get_item($path);
    if (!empty($menu_item['title'])) {
      return $menu_item['title'];
    }
    elseif (drupal_substr($menu_item['page_callback'], 0, 6) == 'views_') {
      // It's a view, load the view to have access to the title
      $view = views_get_view($menu_item['page_arguments']['0']);
      return $view->get_title();
    }
    else {
      return NULL;
    }
  }
}

/**
 * Modify the print_node_conf_table
 *
 * Update the print_node_conf table to reflect the given attributes.
 * If updating to the default values, delete the record.
 *
 * @param $nid
 *   value of the nid field (primary key)
 * @param $link
 *   value of the link field (0 or 1)
 * @param $comments
 *   value of the comments field (0 or 1)
 * @param $url_list
 *   value of the url_list field (0 or 1)
 */
function _print_node_conf_modify($nid, $link, $comments, $url_list) {
    db_query("UPDATE {print_node_conf} SET link = %d, comments = %d, url_list = %d WHERE nid = %d", $link, $comments, $url_list, $nid);
    if (!db_affected_rows()) {
      @db_query("INSERT INTO {print_node_conf} (nid, link, comments, url_list) VALUES (%d, %d, %d, %d)", $nid, $link, $comments, $url_list);
    }
}

/**
 * Auxiliary function to fill the Printer-friendly link attributes
 *
 * @param $title
 *   text to displayed by the link when hovering over it with the mouse
 * @param $class
 *   class attribute to be used in the link
 * @param $new_window
 *   if TRUE opens the target page in a new window
 * @return
 *   array of formatted attributes
 */
function print_fill_attributes($title = '', $class = '', $new_window = FALSE) {
  $print_newwindow = variable_get('print_newwindow', PRINT_NEWWINDOW_DEFAULT);
  $print_robots_noindex = variable_get('print_robots_noindex', PRINT_ROBOTS_NOINDEX_DEFAULT);

  $attributes = array();
  $attributes['title'] = $title;
  if (!empty($class)) {
    $attributes['class'] = $class;
  }

  if ($new_window) {
    switch ($print_newwindow) {
    case 0:
      $attributes['target'] = '_blank';
      break;
    case 1:
      $attributes['onclick'] = 'window.open(this.href); return false';
      break;
    }
  }
  if (!empty($print_robots_noindex)) {
    $attributes['rel'] = 'nofollow';
  }
  return $attributes;
}

/**
 * Auxiliary function to set the link text and html flag
 *
 * @param $type
 *   type of link: 0 or 1 for a text-only link, 2 for icon-only and 3 for
 *   both text and icon
 * @param $text
 *   text to be displayed on the link to the printer-friendly page
 * @param $img
 *   path to the icon file
 * @return
 *   array with the link text and html flag
 */
function _print_format_link_aux($type = 0, $text = '', $img = '') {
  if ($type >= 2) {
    $html = TRUE;
    switch ($type) {
    case 2:
      $text = theme('image', $img, $text, $text, array('class' => 'print-icon'));
      break;
    case 3:
      $text = theme('image', $img, $text, $text, array('class' => 'print-icon print-icon-margin')) . $text;
      break;
    }
  }
  else {
    $html = FALSE;
  }

  return array('text' => $text,
               'html' => $html,
              );
}

/**
 * Format the Printer-friendly link
 *
 * @return
 *   array of formatted attributes
 * @ingroup themeable
 */
function theme_print_format_link() {
  $print_html_link_class = variable_get('print_html_link_class', PRINT_HTML_LINK_CLASS_DEFAULT);
  $print_html_new_window = variable_get('print_html_new_window', PRINT_HTML_NEW_WINDOW_DEFAULT);
  $print_html_show_link = variable_get('print_html_show_link', PRINT_HTML_SHOW_LINK_DEFAULT);
  $print_html_link_text = filter_xss(variable_get('print_html_link_text', t('Printer-friendly version')));

  $img = drupal_get_path('module', 'print') .'/icons/print_icon.gif';
  $title = t('Display a printer-friendly version of this page.');
  $class = strip_tags($print_html_link_class);
  $new_window = $print_html_new_window;
  $format = _print_format_link_aux($print_html_show_link, $print_html_link_text, $img);

  return array('text' => $format['text'],
               'html' => $format['html'],
               'attributes' => print_fill_attributes($title, $class, $new_window),
              );
}

/**
 * Auxiliary function to display a formatted Printer-friendly link
 *
 * Function made available so that developers may call this function from
 * their defined pages/blocks.
 *
 * @param $path
 *   path of the original page (optional). If not specified, the current URL
 *   is used
 * @param $node
 *   an optional node object, to be used in defining the path, if used, the
 *   path argument is irrelevant
 * @return
 *   string with the HTML link to the printer-friendly page
 */
function print_insert_link($path = NULL, $node = NULL) {
  if ($node !== NULL) {
    $nid = $node->nid;
    $path = 'node/'. $nid;
    $allowed_type = print_link_allowed(array('node' => $node));
  }
  else {
    if ($path === NULL) {
      $nid = preg_replace('!^node/([\d]+)!', '$1', $_GET['q']);
      $path = $_GET['q'];
    }
    else {
      $nid = NULL;
    }
    $allowed_type = print_link_allowed(array('path' => $path));
  }

  if ($allowed_type) {
    if ($nid !== NULL) {
      if ($allowed_type === PRINT_ALLOW_BOOK_LINK) {
        $path = 'book/export/html/'. $nid;
      }
      else {
        if (variable_get('print_html_link_use_alias', PRINT_HTML_LINK_USE_ALIAS_DEFAULT) && ($alias = drupal_lookup_path('alias', $path))) {
          $path = $alias;
        }
        else {
          $path = $nid;
        }
      }
      $path = PRINT_PATH .'/'. $path;
      $query = print_query_string_encode($_GET, array('q'));
      if (empty($query)) {
        $query = NULL;
      }
    }
    else {
      $query = NULL;
    }
    drupal_add_css(drupal_get_path('module', 'print') .'/css/printlinks.css');
    $format = theme('print_format_link');
    return '<span class="print_html">'. l($format['text'], $path, array('attributes' => $format['attributes'], 'query' => $query, 'absolute' => TRUE, 'html' => $format['html'])) .'</span>';
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the provided page is enabled according to the visibility settings
 *
 * @param $visibility
 *   current visibility settings:
 *    0 for show on every page except the listed pages
 *    1 for show on only the listed pages
 * @param $pages
 *   list of pages
 * @return
 *   TRUE if it is enabled, FALSE otherwise
 */
function _print_page_match($visibility, $path, $pages) {
  if ($pages) {
    if ($visibility == 2) {
      return drupal_eval($pages);
    }
    $alias = drupal_get_path_alias($path);
    $page_match = drupal_match_path($path, $pages);
    if ($alias != $path) {
      $page_match = $page_match || drupal_match_path($alias, $pages);
    }

    return !($visibility xor $page_match);
  }
  else {
    return !$visibility;
  }
}

/**
 * Check if the link to the PF version is allowed depending on the settings
 *
 * @param $args
 *   array containing the possible parameters:
 *    teaser, node, type, path
 * @return
 *   FALSE if not allowed
 *   PRINT_ALLOW_NORMAL_LINK if a normal link is allowed
 *   PRINT_ALLOW_BOOK_LINK if a link is allowed in a book node
 */
function print_link_allowed($args) {
  if ((!empty($args['teaser']) && !variable_get('print_html_link_teaser', PRINT_HTML_LINK_TEASER_DEFAULT))
      || !user_access('access print')) {
    // If the teaser link is disabled or the user is not allowed
    return FALSE;
  }
  if (!empty($args['path'])) {
    $nid = preg_replace('!^node/!', '', drupal_get_normal_path($args['path']));
    if (ctype_digit($nid)) {
      $args['node'] = node_load($nid);
    }
  }
  if (!empty($args['node'])) {
    static $node_type = '';

    $node = $args['node'];
    if (isset($node->type)) {
      $node_type = $node->type;
    }
    // Node
    $print_html_node_link_visibility = variable_get('print_html_node_link_visibility', PRINT_HTML_NODE_LINK_VISIBILITY_DEFAULT);
    $print_html_node_link_pages = variable_get('print_html_node_link_pages', PRINT_HTML_NODE_LINK_PAGES_DEFAULT);

    if (!_print_page_match($print_html_node_link_visibility, "node/". $node->nid, $print_html_node_link_pages)) {
      // Page not in visibility list
      return FALSE;
    }
    elseif (isset($args['type']) && ($args['type'] == 'comment') && isset($node_type)) {
      // Link is for a comment, return the configured setting
      // Cache this statically to avoid duplicate queries for every comment.
      static $res = array();
      if (!isset($res[$node->nid])) {
        $res[$node->nid] = db_fetch_object(db_query("SELECT comments FROM {print_node_conf} WHERE nid = %d", $node->nid));
      }
      $print_display_comment = ($res && ($res[$node->nid] !== FALSE)) ? intval($res[$node->nid]->comments) : variable_get('print_display_comment_'. $node_type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
      if ($print_display_comment) {
        return PRINT_ALLOW_NORMAL_LINK;
      }
    }
    else {
      // Node link
      if (isset($node->print_display) && !$node->print_display) {
        // Link for this node is disabled
        return FALSE;
      }
      elseif (isset($node->book)) {
        // Node is a book;
        $print_html_book_link = variable_get('print_html_book_link', PRINT_HTML_BOOK_LINK_DEFAULT);
        switch ($print_html_book_link) {
          case 1:
            if (user_access('access printer-friendly version')) {
              return PRINT_ALLOW_BOOK_LINK;
            }
            break;
          case 2:
            return PRINT_ALLOW_NORMAL_LINK;
        }
      }
      else {
        return PRINT_ALLOW_NORMAL_LINK;
      }
    }
  }
  else {
    // 'System' page
    $print_html_sys_link_visibility = variable_get('print_html_sys_link_visibility', PRINT_HTML_SYS_LINK_VISIBILITY_DEFAULT);
    $print_html_sys_link_pages = variable_get('print_html_sys_link_pages', PRINT_HTML_SYS_LINK_PAGES_DEFAULT);

    return _print_page_match($print_html_sys_link_visibility, $_GET['q'], $print_html_sys_link_pages);
  }
  return FALSE;
}

/**
 * Parse an array into a valid urlencoded query string.
 *
 * Modified from drupal_query_string_encode to prevent re-encoding of
 * encoded original.
 *
 * @param $query
 *   The array to be processed e.g. $_GET
 * @param $exclude
 *   The array filled with keys to be excluded.
 * @return
 *   urlencoded string which can be appended to/as the URL query string
 */
function print_query_string_encode($query, $exclude = array(), $parent = '') {
  $params = array();
  foreach ($query as $key => $value) {
    if ($parent) {
      $key = $parent .'['. $key .']';
    }

    if (in_array($key, $exclude, TRUE)) {
      continue;
    }

    if (is_array($value)) {
      $params[] = print_query_string_encode($value, $exclude, $key);
    }
    else {
      $params[] = $key .'='. rawurlencode($value);
    }
  }

  return implode('&', $params);
}

/**
 * Callback function for the preg_replace_callback replacing spaces with %20
 *
 * Replace spaces in URLs with %20
 *
 * @param array $matches
 *   array with the matched tag patterns, usually <a...>+text+</a>
 *
 * @return string
 *   tag with re-written URL
 */
function _print_replace_spaces($matches) {
  // first, split the html into the different tag attributes
  $pattern = '!\s*(\w+\s*=\s*"(?:\\\"|[^"])*")\s*|\s*(\w+\s*=\s*\'(?:\\\\\'|[^\'])*\')\s*|\s*(\w+\s*=\s*\w+)\s*|\s+!';
  $attribs = preg_split($pattern, $matches[1], -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  foreach ($attribs as $key => $value) {
    $attribs[$key] = preg_replace('!(\w)\s*=\s*(.*)!', '$1=$2', $value);
  }

  $size = count($attribs);
  for ($i=1; $i < $size; $i++) {
    // If the attribute is href or src, we may need to rewrite the URL in the value
    if (preg_match('!^(?:href|src)\s*?=(.*)!i', $attribs[$i], $urls) > 0) {
      $url = trim($urls[1], " \t\n\r\0\x0B\"'");
      $new_url = str_replace(' ', '%20', $url);
      $matches[1] = str_replace($url, $new_url, $matches[1]);
    }
  }

  $ret = '<' . $matches[1] . '>';
  if (count($matches) == 4) {
    $ret .= $matches[2] . $matches[3];
  }

  return $ret;
}

/**
 * Implements hook_views_api().
 */
function print_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'print'),
  );
}
