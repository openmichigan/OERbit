<?php
// $Id$

/*
 * COPYRIGHT 2011
 *
 * The Regents of the University of Michigan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * any later version.
 *
 * You may not use the name of The University of Michigan in any
 * advertising or publicity pertaining to the use of distribution of this software
 * without specific, written prior authorization. If the above copyright notice
 * or any other identification of the University of Michigan is included in any
 * copy of any portion of this software, then the disclaimer below must
 * also be included.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION
 * FROM THE UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY
 * PURPOSE, AND WITHOUT WARRANTY BY THE UNIVERSITY OF
 * MICHIGAN OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE LIABLE
 * FOR ANY DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

function _zip_download_debug ($dbgmsg) {
// 	$filename = "debug.txt";
// 	$dbg = fopen($filename, 'a') or die("can't open debug file");
// 	$dbgmsg .= "\n";
// 	fwrite ($dbg, $dbgmsg);
// 	fclose ($dbg);
}

/**
 * Implementation of hook_menu().
 */
function zip_download_menu() {
	$items = array();
  	$items['node/%node/zip_download'] = array(
		'title' => 'Zip download',
		'description' => 'Lets you download files attached to nodes as a zip package.',
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('zip_download_form', 1),
    	'access callback' => 'zip_download_access',
  		'access arguments' => array(1, 'access content'),
		'type' => MENU_CALLBACK,
	);
  	$items['node/%node/zip_download/progress'] = array(
		'title' => 'Zip download progress',
		'description' => 'returns status information on zip download in progress.',
    	'page callback' => 'zip_download_progress',
    	'access callback' => 'zip_download_access',
  		'access arguments' => array(1, 'access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
 * Decides whether to show the Zip Upload tab.
 */
function zip_download_access(&$node, $permission) {
	if ($node->type == 'course' && user_access($permission)) {
		return TRUE;
	}
	return FALSE;
}


/**
 * Responds to ajax for download progress/status.
 */
function zip_download_progress() {
	$progress['status'] = t('Working...');
	$progress['percent'] = 0;
	if (isset ($_SESSION['zip_download_status'])) {
		$progress['status'] = $_SESSION['zip_download_status'];
	}
	if (isset ($_SESSION['zip_download_progress'])) {
		$progress['percent'] = $_SESSION['zip_download_progress'];
	}
	$js = drupal_to_js($progress);
	drupal_json($progress);
}


/**
 * Displays an upload form.
 */
function zip_download_form(&$form_state, $node) {
	$modpath = drupal_get_path('module', 'zip_download');

//	drupal_add_css ("misc/jquery-ui.css");
//	drupal_add_js ("misc/jquery-ui.js");
//	drupal_add_css ($modpath."/zip_download.css");
//	drupal_add_js ($modpath."/zip_download.js", 'module', 'header', FALSE, FALSE);

	unset ($_SESSION['zip_download_status']);
	unset ($_SESSION['zip_download_progress']);

        $zname = (str_replace("/", "-", $node->path).'.zip'); 

	$form['filename'] = array(
		'#type' => 'textfield',
		'#title' => t('Save Zip Archive to'),
                '#default_value' => $zname,
		'#size' => 60,
		'#maxlength' => 128,
		'#description' => t('Save the download archive file with this name.'),
	);

	$form['progressbar'] = array('#type' => 'markup', '#value' => '<div id="progressbar"></div>');

	$form['download'] = array(
		'#type' => 'submit',
		'#value' => t('Download'),
		'#submit' => array('zip_download_form_submit'),
	);
	$form['done'] = array(
		'#type' => 'submit',
		'#value' => t('Done'),
		'#submit' => array('zip_download_form_submit'),
	);
	$form['nid'] = array(
		'#type' => 'value',
		'#value' => $node->nid,
	);

	$form['#attributes'] = array('enctype' => "multipart/form-data");

	if ($_SERVER['REQUEST_METHOD'] == 'GET') {
		$_SESSION['zip_download_done_redirect'] = $_SERVER['HTTP_REFERER'];
	}

	return $form;
}

/**
 * Submits the form and starts the processing.
 */
function zip_download_form_submit($form, &$form_state) {
	$node = node_load($form_state['values']['nid']);
	if ($form_state['values']['op'] == 'Download')  {
		if (zip_download_process($node, $form_state['values']['filename'])) {
			drupal_set_message(t('Archive created and downloaded successfully.'), 'status');
			exit;
		}
	}
	else if ($form_state['values']['op'] == 'Done') {
		drupal_goto('node/' . $node->nid);
	}
}

/**
 * Verify the file specified in sites/... path exists in the file system.
 *
 */
function zip_download_file_exists($path) {
	return (is_readable($_SERVER['DOCUMENT_ROOT'] . '/' . $path) === TRUE);
}

/**
 * Find files associated with course materials and return list of file paths.
 *
 * requires view 'materials_download_filelist'
 *
 */
function zip_download_get_material_files($nid) {
	//
	// uses views module to search for files associated with the course node at $nid
	//
	$_SESSION['zip_download_status'] = 'Zipping...';

	$results = array();
	$file_list = views_get_view('materials_download_filelist', 'default');
	if (is_numeric($nid) && isset($file_list)) {
		$file_list->set_arguments(array($nid));
    $file_list->set_items_per_page(0);
  	$file_list->execute();
   	foreach ($file_list->result as $r) {
	  	if ($r->files_node_data_field_file_filepath != null) {
				//
				// reference to a file, save the path
				//
        if (zip_download_file_exists($r->files_node_data_field_file_filepath)) {
          $results[] = $r->files_node_data_field_file_filepath;
        }
			}
			else if ($r->node_data_field_image_field_image_fid != null) {
				//
				// reference to an image, dig out the image path
				//
				$image = node_load($r->nid);
				if (isset($image)) {
					if (zip_download_file_exists($image->field_image[0]['filepath'])) {
						$results[] = $image->field_image[0]['filepath'];
					}
				}
			}
		}
	}
	return $results;
}

/**
 * create archive and add files.
 *
 */
function zip_download_create_archive($path, &$files) {
	$n = 0;
	$zip = new ZipArchive ();
	if ($zip->open($path, ZipArchive::CREATE) === TRUE) {
		foreach ($files as $nid => $path) {
			if (zip_download_file_exists($path)) {
				$n += $zip->addFile($path, basename($path));
			}
		}
		$zip->close();
	}
	return ($n > 0);
}

/**
 * create archive and add files.
 *
 */
function zip_download_file_transfer($source, $download_name) {
	if (ob_get_level()) {
		ob_end_clean();
	}

	$_SESSION['zip_download_status'] = "Downloading...";

	$filesize = filesize ($source);

	$headers[] = 'Content-Disposition: attachment; filename='.$download_name.'; Content-Length: '.$filesize;
	$headers[] = 'Content-Type: octet/stream';
	$headers[] = 'Content-Type: application/force-download';
	$headers[] = 'Content-Type: application/x-zip-compressed';
	$headers[] = 'Content-Transfer-Encoding: binary';

	foreach ($headers as $header) {
		// To prevent HTTP header injection, we delete new lines that are
		// not followed by a space or a tab.
		// See http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
		$header = preg_replace('/\r?\n(?!\t| )/', '', $header);
		drupal_set_header($header);
	}

	$source = file_create_path($source);

	$progress_increment = ceil (1024.0 / $filesize);

	// Transfer file in 1024 byte chunks to save memory usage.
	if ($fd = fopen($source, 'rb')) {
		// Prevent user from aborting script
		$old_abort = ignore_user_abort(true);
		while (!feof($fd)) {
			if (connection_aborted() || connection_status() != 0) {
				log_to_apache("zip_download: aborted or timed out (should be cleaning up tmp file: {$source})");
				$_SESSION['zip_download_status'] = "Client aborted or timed out...";
				break;
			}
			$_SESSION['zip_download_progress'] += $progress_increment;
			print fread($fd, 1024);
		}
		// Restore previous value
		ignore_user_abort($old_abort);
		fclose($fd);
		return true;
	}
	else {
		drupal_set_message(t('Download failed. Archived file could not be opened.'), 'error');
		drupal_not_found();
	}
	return false;
}

/**
 * Process material files download.
 */
function zip_download_process(&$node, $filename = "Archive.zip") {
	$downloaded = false;

	$files = zip_download_get_material_files($node->nid);

	if (count($files) == 0) {
		drupal_set_message(t('No files were found to add to the zip archive. Either none were attached or the attached files are missing?'), 'warning');
		drupal_goto('node/' . $node->nid);
		return FALSE;
	}

	if (count($files) > 0) {
		$tmp = tempnam(file_directory_temp(), "ZIPDL_");
		if (zip_download_create_archive($tmp, $files)) {
			if (zip_download_file_transfer($tmp, $filename)) {
				$downloaded = TRUE;
			}
		}
		unlink($tmp);
	}
	return $downloaded;
}

/**
 * Required so Views will load the default views for this module.
 */
function zip_download_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'zip_download') .'/includes',
  );
}
