<?php
// $Id$

/*
 * COPYRIGHT 2011
 *
 * The Regents of the University of Michigan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * any later version.
 *
 * You may not use the name of The University of Michigan in any
 * advertising or publicity pertaining to the use of distribution of this software
 * without specific, written prior authorization. If the above copyright notice
 * or any other identification of the University of Michigan is included in any
 * copy of any portion of this software, then the disclaimer below must
 * also be included.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION
 * FROM THE UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY
 * PURPOSE, AND WITHOUT WARRANTY BY THE UNIVERSITY OF
 * MICHIGAN OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE LIABLE
 * FOR ANY DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function material_form_material_node_form_alter(&$form, &$form_state) {
  $form['#after_build'][] = 'material_resource_type';
}

/**
 * Prevents the user from selecting multiple resource types.
 */
function material_resource_type($form) {
  drupal_add_js(drupal_get_path('module', 'material') . '/material.js');
  return $form;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function material_form_views_bulk_operations_form__1_alter(&$form, &$form_state) {
  if (is_array($form['operation']) || is_array($form['confirm'])) {
    $form['#attributes']['class'] = 'views-bulk-operation-form';
  }
}

/**
 * Used for theming the icons for externally linked video, audio, etc. of a material
 */
function material_link_display($type, $view, $field, $row) {
  //log_to_apache($type . " --------------------------");
  //log_to_apache("The view name is: " . $view->name);
  switch ($type) {
  case 'video':
    if (is_array($field->field_values[$row->{$field->field_alias}])) {
      $output = '';
      foreach ($field->field_values[$row->{$field->field_alias}] as $key => $values) {
        $provider = $values['provider'];
        $url = $values['embed'];
        $pname = '';
        //log_to_apache("key: {$key}, provider: {$provider}, embed: {$url}");
	if ($provider === NULL || $provider === '') {
	    //log_to_apache("No provider, returning: empty string");
	    continue;
	}
        switch ($provider) {
          case 'archive':
          case 'bliptv':
          case 'dailymotion':
          case 'google':
          case 'ustream':
          case 'vimeo':
          case 'yahoo':
          case 'youtube':
            $pname = $provider;
            break;
          default:
            if (stristr($url, "slideshare.net/") !== FALSE) {
              // A special-case check for Slideshare
              $pname = 'slideshare';
            } else {
              $pname = 'video';
            }
            break;
        }
        //log_to_apache("Final pname is {$pname} for URL {$url}");
        $output .= '<a href="'.$url.'" target="_blank" class="external"><img src="/sites/all/themes/oer/images/icon_'.$pname.'.gif" alt="'.$pname.' icon" /></a>';
      }
    } else {
      //log_to_apache("No values, returning: empty string");
      return '';
    }
    break;
  case 'audio':
    $output .= '<a href="'.$url.'" target="_blank" class="external"><img src="/sites/all/themes/oer/images/icon_audio.gif" alt="generic audio icon" /></a>';
    break;
  }
  //log_to_apache("Returning: \"${output}\"");
  return $output;
}


/**
  * Log a message to the apache error log
  * based on the logging level selected
  *
  * If no config option is set, then only 'error'
  * messages are logged.  Otherwise, if the message
  * is at or 'above' the level of the config option,
  * then it is logged.
  *
  * @access public
  * @param string level - message level indicator (i.e. 'error', 'warn', 'info', 'debug')
  * @param string message - message to be logged
  */
function log_to_apache($message)
{
  // Attempt to only set this once
  $now = date("D M j G:i:s Y");
  $message = "[" . $now . "] " . $message . "\n";
  $stderr = @fopen('php://stderr', 'w');
  fwrite($stderr, $message);
  fclose($stderr);
}
