<?php
// $Id$

/*
 * COPYRIGHT 2011
 *
 * The Regents of the University of Michigan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * any later version.
 *
 * You may not use the name of The University of Michigan in any
 * advertising or publicity pertaining to the use of distribution of this software
 * without specific, written prior authorization. If the above copyright notice
 * or any other identification of the University of Michigan is included in any
 * copy of any portion of this software, then the disclaimer below must
 * also be included.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION
 * FROM THE UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY
 * PURPOSE, AND WITHOUT WARRANTY BY THE UNIVERSITY OF
 * MICHIGAN OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE LIABLE
 * FOR ANY DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implementation of hook_menu().
 */
function hierarchical_permissions_menu() {
  $items = array();
  $items['user/%user/hierarchical_permissions'] = array(
    'title' => 'Hierarchical Permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hierarchical_permissions_user_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function hierarchical_permissions_menu_alter(&$items) {
  $items['node/%node/edit']['access callback'] = 'hierarchical_permissions_access';
}

/**
 * Returns whether node is within space that user admins
 */
function hierarchical_permissions_user_has_admin($node, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  if ($account->uid == 1 || in_array('site administrator', $account->roles) || in_array('content manager', $account->roles)) {
    return TRUE;
  }
  if (in_array('unit manager', $account->roles) || in_array('resource manager', $account->roles)) {
    // Check for direct admin rights on the node
    if (db_result(db_query('SELECT * FROM {hierarchical_permissions} WHERE uid=%d AND nid=%d', $account->uid, $node->nid))) {
      return TRUE;
    }
    // Check if node is within hierarchy within which user has admin rights
    $unit_nodes = array();
    $course_nodes = array();
    if (in_array('unit manager', $account->roles)) {
      $unit_nodes = hierarchical_permissions_get_all_by_unit_manager($account);
    }
    if (in_array('resource manager', $account->roles)) {
      $course_nodes = hierarchical_permissions_get_all_by_resource_manager($account);
    }
    $nodes = $unit_nodes + $course_nodes;
    if (in_array($node->nid, array_keys($nodes))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns whether a user can admin this node.
 */
function hierarchical_permissions_access($op, $node, $account = NULL) {
  if ($op == 'edit' && in_array($node->type, array('unit', 'course', 'information', 'material', 'session', 'other'))) {
    if (empty($account)) {
      global $user;
      $account = $user;
    }
    return hierarchical_permissions_user_has_admin($node, $account);
  }
  if (module_exists('revisioning')) {
    return _revisioning_view_edit_access_callback($op, $node);
  }
  return node_access($op, $node, $account);
}

/**
 * Implementation of hook_block().
 */
function hierarchical_permissions_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['hierarchical-permissions'] = array(
        'info' => t('Admin Permissions'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      );
      return $blocks;
    case 'view':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        return _hierarchical_permissions_block(arg(1));
      }
  }
}

/**
 * Generates a list of users with permissions to modify this node.
 */
function _hierarchical_permissions_block($nid) {
  return; // XXX Don't do this for now until we figure out how to do this more efficiently!
  $users = array();
  if (!empty($nid)) {
    if (db_result(db_query('SELECT * FROM {hierarchical_permissions} WHERE nid=%d', $nid))) {
      $query = db_query('SELECT p.uid AS uid, u.name AS name FROM {hierarchical_permissions} p INNER JOIN {users} u ON p.uid = u.uid WHERE nid=%d', $nid);
      while ($user = db_fetch_object($query)) {
        $users[] = array(
          'data' => l($user->name, 'user/' . $user->uid),
        );
      }
    }
    else {
      $query = db_query('SELECT uid, name FROM {users} WHERE status=1');
      while ($account = db_fetch_object($query)) {
        $nodes = hierarchical_permissions_get_units_by_user($account);
        if (in_array($nid, array_keys($nodes))) {
          $users[] = array(
            'data' => l($account->name, 'user/' . $account->uid),
          );
        }
        $nodes = hierarchical_permissions_get_courses_by_user($account);
        if (in_array($nid, array_keys($nodes))) {
          $users[] = array(
            'data' => l($account->name, 'user/' . $account->uid),
          );
        }
        $nodes = hierarchical_permissions_get_all_by_unit_manager($account);
        if (in_array($nid, array_keys($nodes))) {
          $users[] = array(
            'data' => l($account->name, 'user/' . $account->uid),
          );
        }
      }
    }
  }
  if (!empty($users)) {
    return array(
      'subject' => t('Admin Permissions'),
      'content' => theme_item_list($users),
    );
  }
}

/**
 * Hierarchical permissions settings for user account.
 */
function hierarchical_permissions_user_settings_form(&$form_state) {
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $account = user_load(arg(1));
  }
  if (empty($account)) {
    return;
  }
  $units = hierarchical_permissions_get_units_by_user($account, 'admin');
  $courses = hierarchical_permissions_get_courses_by_user($account, 'admin');
  $form['academic_units'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Academic Units'),
    '#description' => t('Select the academic unit that user %user should be admin of. User %user will be admin of all units that belong to the selected ones.', array('%user' => $account->name)),
    '#options' => hierarchical_permissions_get_units(),
    '#default_value' => $units,
    '#access' => in_array('unit manager', $account->roles),
  );
  $form['courses_resources'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Courses/Resources'),
    '#description' => t('Select the courses/resources that user %user should be admin of. User %user will be admin of all elements that belong to the selected courses/resources.', array('%user' => $account->name)),
    '#options' => hierarchical_permissions_get_courses(),
    '#default_value' => $courses,
    '#access' => in_array('resource manager', $account->roles),
  );
  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 10,
    );
  $form['#submit'] = array('hierarchical_permissions_user_settings_form_submit');
  return $form;
}

/**
 * Stores the user-node combination for admin permissions.
 */
function hierarchical_permissions_user_settings_form_submit($form, &$form_state) {
  $record['uid'] = $form_state['values']['account'];
  db_query('DELETE FROM {hierarchical_permissions} WHERE uid=%d', $record['uid']);
  foreach ($form_state['values']['academic_units'] as $key => $nid) {
    if (!empty($nid)) {
      $record['nid'] = $nid;
      drupal_write_record('hierarchical_permissions', $record);
      unset($record['nid']);
    }
  }
  foreach ($form_state['values']['courses_resources'] as $key => $nid) {
    if (!empty($nid)) {
      $record['nid'] = $nid;
      drupal_write_record('hierarchical_permissions', $record);
      unset($record['nid']);
    }
  }
  drupal_set_message('Your settings have been saved.');
}

/**
 * Returns the academic unit hierarchy from the specified starting node.
 */
function hierarchical_permissions_get_units($parent = NULL) {
  $units = array();
  hierarchical_permissions_get_unit_children($units, $parent);
  asort($units);
  return $units;
}

/**
 * Returns the courses in the hierarchy from the specified starting node.
 */
function hierarchical_permissions_get_courses($parent = NULL) {
  $courses = array();
  if (empty($parent)) {
    $query = db_query("SELECT nid, title FROM {node} WHERE type='course' ORDER BY title");
    while ($course = db_fetch_object($query)) {
      $courses[$course->nid] = $course->title;
    }
  }
  else {
    hierarchical_permissions_get_courses_by_unit($courses, $parent);
    asort($courses);
  }
  return $courses;
}

/**
 * Returns a list of units the user is an admin of.
 */
function hierarchical_permissions_get_units_by_user($account = NULL, $op = 'node') {
  $units = array();
  $query = db_query("SELECT p.nid AS nid FROM {hierarchical_permissions} p INNER JOIN {node} n ON p.nid = n.nid WHERE n.type='unit' AND p.uid=%d", $account->uid);
  switch ($op) {
    case 'admin':
      while ($unit = db_fetch_object($query)) {
        $units[] = $unit->nid;
      }
      break;
    case 'node':
      while ($unit = db_fetch_object($query)) {
        $node = node_load($unit->nid);
        hierarchical_permissions_get_unit_children($units, $node);
      }
      break;
  }
  return $units;
}

/**
 * Returns a list of courses the user is an admin of.
 */
function hierarchical_permissions_get_courses_by_user($account, $op = 'node') {
  $courses = array();
  $query = db_query("SELECT p.nid AS nid FROM {hierarchical_permissions} p INNER JOIN {node} n ON p.nid = n.nid WHERE n.type='course' AND p.uid=%d", $account->uid);
  switch ($op) {
    case 'admin':
      while ($course = db_fetch_object($query)) {
        $courses[] = $course->nid;
      }
      break;
    case 'node':
      while ($course = db_fetch_object($query)) {
        $node = node_load($course->nid);
        hierarchical_permissions_get_course_children($courses, $node);
      }
      break;
  }
  return $courses;
}

/**
 * Returns a list of all nodes a 'unit manager' is an admin of.
 */
function hierarchical_permissions_get_all_by_unit_manager($account) {
  $nodes = hierarchical_permissions_get_units_by_user($account);
  foreach ($nodes as $nid => $values) {
    hierarchical_permissions_get_courses_by_unit($nodes, node_load($nid));
  }
  foreach ($nodes as $nid => $values) {
    hierarchical_permissions_get_course_children($nodes, node_load($nid));
  }
  return $nodes;
}

/**
 * Returns a list of all nodes a 'resource manager' is an admin of.
 */
function hierarchical_permissions_get_all_by_resource_manager($account) {
  $nodes = hierarchical_permissions_get_courses_by_user($account);
  foreach ($nodes as $nid => $values) {
    hierarchical_permissions_get_course_children($nodes, node_load($nid));
  }
  return $nodes;
}

/**
 * Recursively gets a list of child units within the current academic unit.
 */
function hierarchical_permissions_get_unit_children(&$units, $node) {
  if (empty($node)) {
    $query = db_query("SELECT field.nid AS nid, node.title AS title FROM {node} node INNER JOIN {content_field_parent_unit} field ON node.nid = field.nid WHERE field_parent_unit_nid IS NULL AND node.type = 'unit'");
  }
  else {
    $query = db_query("SELECT field.nid AS nid, node.title AS title FROM {node} node INNER JOIN {content_field_parent_unit} field ON node.nid = field.nid WHERE field.field_parent_unit_nid = %d AND node.type = 'unit'", $node->nid);
  }
  // BUG FIX This unit node must be added to the list, whether it has child units or not!
  if (!empty($node)) {
    $units[$node->nid] = $node->title;
  }
  while ($unit = db_fetch_object($query)) {
    if (!empty($unit->title)) {
      $units[$unit->nid] = $unit->title;
    }
    hierarchical_permissions_get_unit_children($units, $unit);
  }
}

/**
 * Get all the elements that belong to a course.
 */
function hierarchical_permissions_get_course_children(&$courses, $node) {
  if (!empty($node)) {
    $query = db_query('SELECT node.nid AS nid, node.title AS title FROM {node} node INNER JOIN {content_field_course_reference} ref ON ref.nid = node.nid WHERE field_course_reference_nid=%d', $node->nid);
    while ($course = db_fetch_object($query)) {
      $courses[$course->nid] = $course->title;
    }
  }
}

/**
 * Recursively gets a list of courses within the current academic unit.
 */
function hierarchical_permissions_get_courses_by_unit(&$courses, $node) {
  $query = db_query('SELECT field.nid AS nid, node.title AS title, node.type AS type FROM {node} node INNER JOIN {content_field_parent_unit} field ON node.nid = field.nid WHERE field.field_parent_unit_nid = %d', $node->nid);
  while ($child = db_fetch_object($query)) {
    if ($child->type == 'course') {
      $courses[$child->nid] = $child->title;
    }
    elseif ($child->type == 'unit') {
      hierarchical_permissions_get_courses_by_unit($courses, $child);
    }
  }
}

/**
 * Implementation of hook_user_node_access().
 *
 * @see module_grants_node_revision_access()
 *
 * @param $revision_op
 *   node or revision operation e.g. 'view revisions'
 * @param $node
 * @return the associated node operation required for this revision_op, or
 *   FALSE if access to the node is to be denied.
 *   Valid node operations to return are 'view', 'update', 'delete'.
 */
function hierarchical_permissions_user_node_access($revision_op, $node) {
  global $user;

  switch ($revision_op) {
    case 'view current':
      if ($node->status) {
        break;
      }
      /* else fall through */
    case 'compare to current':
    case 'view revisions':
    case 'view revision list':
    case 'edit current':
    case 'edit revisions':
    case 'revert revisions':
    case 'publish revisions':
    case 'unpublish current revision':
      if (hierarchical_permissions_user_has_admin($node, $user)) {
        break;
      } else {
        return FALSE;
      }
      break;
    case 'delete revisions':
    case 'delete node':
      if (hierarchical_permissions_user_has_admin($node, $user)) {
        break;
      } else {
        return 'delete';
      }
      break;
    default:
      drupal_set_message("Unknown Revisioning operation '$revision_op'. Treating as 'view'.", 'warning', FALSE);
  }
  return 'view';
}
