<?php
// $Id$

/*
 * COPYRIGHT 2011
 *
 * The Regents of the University of Michigan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * any later version.
 *
 * You may not use the name of The University of Michigan in any
 * advertising or publicity pertaining to the use of distribution of this software
 * without specific, written prior authorization. If the above copyright notice
 * or any other identification of the University of Michigan is included in any
 * copy of any portion of this software, then the disclaimer below must
 * also be included.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION
 * FROM THE UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY
 * PURPOSE, AND WITHOUT WARRANTY BY THE UNIVERSITY OF
 * MICHIGAN OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE LIABLE
 * FOR ANY DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implementation of hook_menu_alter().
 */
function course_menu_alter(&$items) {
  $items['node/%node/view']['weight'] = -10;
  $items['node/%node/edit']['weight'] = -9;
  $items['node/%node/revisions']['weight'] = -8;
  $items['node/%node/accessibility']['weight'] = -7;
  $items['node/%node/track']['weight'] = -6;
  $items['node/%node/nodereferrer_create_content']['access callback'] = FALSE;
}

/**
 * Implementation of hook_block().
 */
function course_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['course-feed'] = array('info' => 'Course Feed');
      $blocks['course-navigation'] = array('info' => 'Course Navigation');
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'course-feed':
          $block = array(
            'subject' => t('Course Feed'),
            'content' => course_get_feed_link(),
          );
          return $block;
        case 'course-navigation':
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $course = node_load(arg(1));
            if ($course->type == 'course') {
              $block = array(
                'subject' => t('Course Navigation'),
                'content' => course_get_navigation_links($course),
              );
              return $block;
            }
          }
      }
  }
}

/**
 * Return the appropriate feed link for the current course.
 */
function course_get_feed_link() {
  $node = menu_get_object('node', 1, $_GET['q']);
  $alias = drupal_lookup_path('alias', 'node/' . $node->nid . ($node->type == 'course' ? '/rss' : '/feed'));
  $icon = '<img src="' . url('misc/feed.png') . '" alt="Syndicate content" title="Syndicate" width="16" height="16" />';
  if ($alias && in_array($node->type, array('course', 'unit'))) {
    $link = '<a href="' . url($alias) . '" class="feed-icon">' . $icon . '</a>';
  }
  elseif (arg(0) == 'taxonomy') {
    $link = '<a href="' . url($_GET['q']) . '/0/feed" class="feed-icon">' . $icon . '</a>';
  }
  else {
    $link = '<a href="'.url($_GET['q']).'/feed" class="feed-icon">' . $icon . '</a>';
  }
  return '<span class="print_rss">' . $link . '</span>';
}

/**
 * Display the course navigation tabs.
 */
function course_get_navigation_links(&$course) {
  $message = '';
  $tabs = array();
  $overview = FALSE;
  if (is_array($course->field_course_information[0]['items'])) {
    foreach ($course->field_course_information[0]['items'] as $information) {
      $node = node_load($information['nid']);
      if ($node->status) {
        $overview = TRUE;
      }
    }
  }
  $highlights = FALSE;
  if (is_array($course->field_course_highlights[0]['items'])) {
    foreach ($course->field_course_highlights[0]['items'] as $highlight) {
      $node = node_load($highlight['nid']);
      if ($node->status) {
        $highlights = TRUE;
      }
    }
  }
  $materials = FALSE;
  if (is_array($course->field_course_materials[0]['items'])) {
    foreach ($course->field_course_materials[0]['items'] as $material) {
      $node = node_load($material['nid']);
      if ($node->status && $node->field_material_type[0]['value'] != 'unknown') {
        $materials = TRUE;
      }
    }
  }
  $sessions = FALSE;
  if (is_array($course->field_course_sessions[0]['items'])) {
    foreach ($course->field_course_sessions[0]['items'] as $session) {
      $node = node_load($session['nid']);
      if ($node->status) {
        $sessions = TRUE;
      }
    }
  }
  if (user_is_anonymous()) {
    if ($materials || $highlights || $sessions) {
      $tabs[] = array('data' => l(t('Overview'), $course->path), 'class' => course_navigation_active($course->path));
    }
    if ($highlights) {
      $tabs[] = array('data' => l(t('Highlights'), $course->path . '/highlights'), 'class' => course_navigation_active($course->path . '/highlights'));
    }
    if ($materials) {
      $tabs[] = array('data' => l(t('Materials'), $course->path . '/materials'), 'class' => course_navigation_active($course->path . '/materials'));
    }
    if ($sessions) {
      $tabs[] = array('data' => l(t('Sessions'), $course->path . '/sessions'), 'class' => course_navigation_active($course->path . '/sessions'));
    }
  }
  else {
    if (user_access('edit revisions')
    && (!is_null(course_navigation_active($course->path . '/highlights'))
    || !is_null(course_navigation_active($course->path . '/materials'))
    || !is_null(course_navigation_active($course->path . '/sessions')))) {
      $message = '<div class="help">' . t('The navigation tabs above are specific to the course, not its sub-elements.') . '</div>';
    }
    $tabs[] = array('data' => l(t('Overview'), $course->path), 'class' => course_navigation_active($course->path) . (!$overview ? ' empty' : ''));
    $tabs[] = array('data' => l(t('Highlights'), $course->path . '/highlights'), 'class' => course_navigation_active($course->path . '/highlights') . (!$highlights ? ' empty' : ''));
    $tabs[] = array('data' => l(t('Materials'), $course->path . '/materials'), 'class' => course_navigation_active($course->path . '/materials') . (!$materials ? ' empty' : ''));
    $tabs[] = array('data' => l(t('Sessions'), $course->path . '/sessions'), 'class' => course_navigation_active($course->path . '/sessions') . (!$sessions ? ' empty' : ''));
  }
  return $message . theme_item_list($tabs, NULL, 'ul', array('class' => 'course-navigation links inline'));
}

/**
 * Determines the active menu item.
 */
function course_navigation_active($path) {
  if (drupal_get_path_alias($_GET['q']) == $path) {
    return ' active';
  }
  return NULL;
}

/**
 * Determines whether the tab contains information.
 */
function course_navigation_empty(&$course, $section = 'overview') {
  switch ($section) {
    case 'overview':
      if (!is_array($course->field_course_information[0]['items'])) {
        return ' empty';
      }
      break;
    case 'highlights':
      if (!is_array($course->field_course_highlights[0]['items'])) {
        return ' empty';
      }
      break;
    case 'materials':
      if (!is_array($course->field_course_materials[0]['items'])) {
        return ' empty';
      }
      else {
        foreach ($course->field_course_materials[0]['items'] as $material) {
          $node = node_load($material['nid']);
          if ($node->status && $node->field_material_type[0]['value'] != 'unknown') {
            return;
          }
        }
        return ' empty';
      }
      break;
    case 'sessions':
      if (!is_array($course->field_course_sessions[0]['items'])) {
        return ' empty';
      }
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function course_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != 'course') {
    return;
  }
  if (module_exists('pathauto')) {
    module_load_include('inc', 'course', 'course.pathauto');
    course_pathauto_alias($node, $op);
  }
  switch ($op) {
    case 'view':
      $breadcrumb = drupal_get_breadcrumb();
      $section = array_pop(arg());
      if (in_array($section, array('overview', 'sessions', 'materials', 'highlights'))) {
        array_pop($breadcrumb);
        if (variable_get('path_breadcrumb_current_link', 0) != 0) {
          $breadcrumb[] = l(ucfirst($section), $_GET['q']);
        }
        else {
          $breadcrumb[] = ucfirst($section);
        }
        drupal_set_breadcrumb($breadcrumb);
      }
      break;
  }
}

/**
 * Set inherited values from parent element.
 */
function course_form_alter(&$form, &$form_state, $form_id) {
  // Do nothing if this is not a node-editing form.
  if (substr_count($form_id, 'node_form') <= 0) {
    return;
  }
  if ($form_id == 'unit_node_form') {
    $form['field_unit_top']['#description'] = '<input type="checkbox" value="0" /> <span class="fake-field-content">No, this is not a top level unit. Its parent unit is:</span>';
    $form['field_parent_unit']['#prefix'] = '<div class="fake-field-no-content">';
    $form['field_parent_unit']['#suffix'] = '</div>';
  }
  // Add Cancel to the form
  $destination = '<front>';
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'create_referrer') {
    $destination = 'node/' . arg(1);
  }
  elseif ($form['#node']->nid) {
    $destination = 'node/' . $form['#node']->nid;
  }
  else {
    $destination = referer_uri();
  }
  // Add Cancel to the form
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Back'), $destination),
    '#weight' => -999,
  );
  $form['buttons']['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), $destination),
    '#weight' => 999,
  );
  if (!in_array($form_id, array('information_node_form', 'session_node_form', 'material_node_form', 'other_node_form'))) {
    return;
  }
  $parent = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'create_referrer') {
    $parent = node_load(arg(1));
  }
  elseif (!empty($form['field_course_reference'][0]['#default_value']['nid'])) {
    $parent = node_load($form['field_course_reference'][0]['#default_value']['nid']);
  }
  // Pre-populate course information
  if (!$form['#node']->nid) {
    $form_state['values']['creativecommons']['select_license_form']['cc_license_uri'] = $parent->cc->uri;
    $form_state['values']['creativecommons']['metadata']['attributionName'] = $parent->cc->metadata['attributionName'];
    $form_state['values']['creativecommons']['metadata']['attributionURL'] = $parent->cc->metadata['attributionURL'];
    $form_state['values']['creativecommons']['metadata']['type'] = $parent->cc->metadata['type'];
    $form_state['values']['creativecommons']['metadata']['source'] = $parent->cc->metadata['source'];
    $form_state['values']['creativecommons']['metadata']['description'] = $parent->cc->metadata['description'];
    $form_state['values']['creativecommons']['metadata']['creator'] = $parent->cc->metadata['creator'];
    $form_state['values']['creativecommons']['metadata']['rights'] = $parent->cc->metadata['rights'];
    $form_state['values']['creativecommons']['metadata']['date'] = $parent->cc->metadata['date'];
    $form['creativecommons']['select_license_form']['cc_license_uri']['#default_value'] = $parent->cc->uri;
    $form['creativecommons']['metadata']['attributionName']['#default_value'] = $parent->cc->metadata['attributionName'];
    $form['creativecommons']['metadata']['attributionName']['#default_value'] = $parent->cc->metadata['attributionName'];
    $form['creativecommons']['metadata']['attributionURL']['#default_value'] = $parent->cc->metadata['attributionURL'];
    $form['creativecommons']['metadata']['type']['#default_value'] = $parent->cc->metadata['type'];
    $form['creativecommons']['metadata']['source']['#default_value'] = $parent->cc->metadata['source'];
    $form['creativecommons']['metadata']['description']['#default_value'] = $parent->cc->metadata['description'];
    $form['creativecommons']['metadata']['creator']['#default_value'] = $parent->cc->metadata['creator'];
    $form['creativecommons']['metadata']['rights']['#default_value'] = $parent->cc->metadata['rights'];
    $form['creativecommons']['metadata']['date']['#default_value'] = $parent->cc->metadata['date'];
    if (is_array($parent->field_creators)) {
      foreach ($parent->field_creators as $key => $creator) {
        $form['field_creators'][$key]['#default_value']['value'] = $creator['value'];
      }
    }
    if (is_array($parent->field_contributors)) {
      foreach ($parent->field_contributors as $key => $contributors) {
        $form['field_contributors'][$key]['#default_value']['value'] = $contributors['value'];
      }
    }
    $form['field_publisher'][0]['#default_value']['value'] = $parent->field_publisher[0]['value'];
  }
  // Populate Materials Reference checkboxes
  if (isset($form['field_content_reference'])) {
    $form['field_content_reference']['#after_build'][] = 'course_materials_reference';
  }
  // Add Cancel to the form
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Back to Course'), 'node/' . $parent->nid),
    '#weight' => -999,
  );
  $form['buttons']['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'node/' . $parent->nid),
    '#weight' => 999,
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function course_form_course_node_form_alter(&$form, &$form_state) {
  $form['#after_build'][] = 'course_populate_fields';
}
function course_form_content_add_more_js_alter(&$form, &$form_state) {
  $form['#after_build'][] = 'course_populate_fields';
}

/**
 * Dynamically populate fields.
 */
function course_populate_fields($form) {
  drupal_add_js(drupal_get_path('module', 'course') . '/course.js');
  return $form;
}

/**
 * List of materials to reference.
 */
function course_materials_reference($element) {
  $course = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node->type == 'course') {
      $course = node_load($node->nid);
    }
    elseif (!empty($node->field_course_reference[0]['nid'])) {
      $course = node_load($node->field_course_reference[0]['nid']);
    }
  }
  $query = db_query('SELECT DISTINCT(n.nid) AS nid, r.title AS title FROM {content_field_course_reference} n INNER JOIN {node_revisions} r ON n.nid = r.nid WHERE n.field_course_reference_nid = %d', $course->nid);
  $materials = array();
  while ($material = db_fetch_object($query)) {
    $materials[$material->nid] = $material->title;
  }
  foreach ($element['nid']['nid'] as $nid => $value) {
    if (is_numeric($nid)) {
      if (!in_array($nid, array_keys($materials))) {
        unset($element['nid']['nid'][$nid]);
      }
      else {
        $material = node_load($nid);
        $element['nid']['nid'][$nid]['#title'] = '<span title="' . date('F j, Y', $material->created) . ' - '
          . $material->field_link[0]['url']
          . $material->field_file[0]['filename']
          . $material->field_image[0]['filename']
          . $material->field_video[0]['value'] . '">'
          . ucfirst($material->field_resource_type[0]['value']) . ' - ' . $material->title . '</span>';
      }
    }
  }
  $element['nid']['nid']['#options'] = $materials;
  return $element;
}

/**
 * Implementation of hook_cron().
 */
function course_cron() {
  $query = db_query('SELECT n.vid AS vid, n.changed AS changed FROM {node} n INNER JOIN {content_type_course} c ON n.vid = c.vid WHERE c.field_course_featured_value = "Yes"');
  while ($featured = db_fetch_object($query)) {
    if (date('U', strtotime('-6 months')) > $featured->changed) {
      db_query('UPDATE {content_type_course} SET field_course_featured_value = "No" WHERE vid = %d', $featured->vid);
    }
  }
}

/**
 * Implementation of hook_pathauto() for course aliases.
 */
function course_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'course';
      $settings['token_type'] = 'node';
      $settings['groupheader'] = t('Course path settings');
      $settings['patterndescr'] = t('Pattern for course page paths');
      $settings['patterndefault'] = t('');
      $settings['patternitems'] = array(
        'overview' => t('Pattern for course overview'),
        'sessions' => t('Pattern for course sessions'),
        'materials' => t('Patern for course materials'),
        'highlights' => t('Pattern for course highlights'),
        'rss' => t('Pattern for course RSS Feed'),
        'rdf' => t('Pattern for course RDF'),
        //'latest_course' => t('Pattern for latest course'),
        //'latest_overview' => t('Pattern for latest course overview'),
        //'latest_sessions' => t('Pattern for latest course sessions'),
        //'latest_materials' => t('Patern for latest course materials'),
        //'latest_highlights' => t('Pattern for latest course highlights'),
        //'latest_rss' => t('Pattern for latest course RSS Feed'),
        //'latest_rdf' => t('Pattern for latest course RDF'),
      );
      $patterns = token_get_list('node');
      foreach ($patterns as $type => $pattern_set) {
        if ($type != 'global') {
          foreach ($pattern_set as $pattern => $description) {
            $settings['placeholders']['['. $pattern .']'] = $description;
          }
        }
      }
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
function course_views_post_render(&$view, &$output, &$cache) {
  // Only alter the course version view
  if ($view->name != 'course_versions') {
    return;
  }
  if (!empty($view->result)) {
    foreach ($view->result as $key => $course) {
      if ($course->nid == arg(1)) {
        // Add "active" class to current node
        $output = str_replace('<li class="views-row views-row-' . ($key + 1), '<li class="views-row views-row-' . ($key + 1) . ' active', $output);
      }
    }
  }
}

/**
 * Implementation of hook_token_list().
 */
function course_token_list($type = 'all') {
  if ($type == 'node' || $type == 'all') {
    $tokens = array();
    $tokens['course']['parent_node-path']  = t('Relative path alias of the parent node of the node.');
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function course_token_values($type, $node = NULL) {
  if ($type == 'node') {
    $parent = NULL;
    if (!empty($node->field_unit_top[0]['nid'])) {
      $parent = node_load($node->field_unit_top[0]['nid']);
    }
    elseif (!empty($node->field_parent_unit[0]['nid'])) {
      $parent = node_load($node->field_parent_unit[0]['nid']);
    }
    elseif (!empty($node->field_course_reference[0]['nid'])) {
      $parent = node_load($node->field_course_reference[0]['nid']);
    }
    $tokens = array();
    $tokens['parent_node-path'] = !empty($parent->path) ? $parent->path : '';
    return $tokens;
  }
}
