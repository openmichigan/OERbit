<?php

/**
 * @file
 * The Cosign Module
 *
 * This module manages automatic user login and supplies cosign logout bar.
 * It depends on the webserver auth module.
 */

/**
 * Implementation of hook_init().
 */
function cosign_init() {
  global $user;

  //@TODO: Fix this. What if someone aliases logout?
  if ($_GET['q'] == 'logout') {
    watchdog('cosign', "logout: %name", array('%name' => $user->name));
    cosign_logout();
  }
  elseif ($user->uid) {
    // do nothing, user is logged in, and not logging out...
  }
  else {
    watchdog('cosign', "login:  %name", array('%name' => $user->name));
    //webserver_auth_init();
    $authname = '';

    // Make sure we get the remote user whichever way it is available.
    if (isset($_SERVER['REDIRECT_REMOTE_USER'])) {
      $authname = $_SERVER['REDIRECT_REMOTE_USER'];
    }
    elseif (isset($_SERVER['REMOTE_USER'])) {
      $authname = $_SERVER['REMOTE_USER'];
    }

    // Perform some cleanup so plaintext passwords aren't available under
    // mod_auth_kerb.
    unset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']);
  
    // Retrieve user credentials
    $sql = "SELECT uid FROM {authmap} WHERE authname = '%s' AND module = 'cosign'";
    $result = db_query($sql, $authname);
    $expected = db_fetch_array($result);
 
    if (isset($user) && $user->uid === $expected['uid']) {
      // Do nothing: user is already logged into Drupal with session data matching
    }
    else {
      if (!empty($authname)) {
      /***********************************************************
       * bdr - at this point, we have a valid cosign user, now
       *       see if user is "authorized" to use Druapl by
       *       checking to see if user was found in the
       *       "authmap" table.  If not, show the Drupal node
       *       named "invalidlogin".
       **********************************************************/
        if (!$expected){
            drupal_goto('http://' . $_SERVER['SERVER_NAME'] . base_path() . "invalidlogin");
        }
        $user = user_external_load($authname);
        watchdog('cosign', "login: %name", array('%name' => $authname));
        /*******************************************
         * bdr - added this line so only 1 web page
         *   "refresh" was needed to format the
         * "admin_menu" correctly after cosign login
         *******************************************/
        //drupal_session_regenerate();  // Only available in pressflow and Drupal 7
        sess_regenerate();
      }
    }

    /***********************************************************
     * bdr - I added this because the the login does not work
     *       correctly for cosign if there is no entry for the
     *       uid in the "authmap" table (authorization mapping)
     *       ... so, since the only external auth we care about
     *       is cosign, make sure the entry being used in the
     *       "users" table has a corresponding entry in the
     *       "authmap" table.      
     **********************************************************/
     $authmap_sql = "SELECT uid, name FROM {users} WHERE uid > 0 AND name NOT IN (SELECT authname FROM {authmap})";
     $result = db_query($authmap_sql);

      while ($user_info = db_fetch_object($result)) {
        if (!empty($user_info->name)) {
	  $insert_sql = "INSERT INTO {authmap} (authname, uid, module) VALUES ('%s', %d, '%s')";
          db_query($insert_sql, $user_info->name, $user_info->uid, 'cosign');
        }
      }
    }
    return TRUE;
}

/*
 * Page callback that defines the admin form.
 */
function cosign_admin() {

  $logout_machine = 'https://' . $_SERVER[ 'SERVER_NAME' ];
  $script_path = '/cgi-bin/logout';
  $logout_path = $logout_machine . $script_path;

  $form['cosign_logout_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Logout Path'),
    '#default_value' => variable_get('cosign_logout_path', $logout_path),
    '#size' => 80,
    '#maxlength' => 200,
    '#description' => t("The address (including http(s)) of the machine and script path for logging out."),
  );

  $logout_to =  'http://' . $_SERVER[ 'SERVER_NAME' ] . base_path();

  $form['cosign_logout_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Logout to'),
    '#default_value' => variable_get('cosign_logout_to', $logout_to),
    '#size' => 80,
    '#maxlength' => 200,
    '#description' => t("The address to redirect users to after they have logged out."),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function cosign_menu() {
  $items['admin/settings/cosign'] = array(
    'title' => 'Cosign',
    'description' => 'Control the Cosign module behavior',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cosign_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/***********************************************************
 * bdr - comment out some code here to that the Drupal    
 *       app can "add a user".  This does not add an user 
 *       to the Kerberos database, just to the Drupal app  
 *       for authorization purposes.                         
 **********************************************************/
/**
 * Implementation of hook_form_alter().
 */
function cosign_form_alter(&$form, $form_state, $form_id) {
// if ($form_id == "user_register") {
//   drupal_goto('https://' . $_SERVER['SERVER_NAME'] . base_path());
// }

 if ($form_id == "user_admin_settings") {
    $form['registration']['#title'] = t($form['registration']['#title']) . " (disabled by the cosign module) ";
    $form['registration']['#collapsible'] = TRUE;
    $form['registration']['#collapsed'] = TRUE;
    $form['registration']['user_register']['#default_value'] = 1;
    $form['email']['#title'] = t($form['email']['#title']) . " (disabled by the cosign module) ";
    $form['email']['#collapsible'] = TRUE;
    $form['email']['#collapsed'] = TRUE;
    foreach ($form['registration'] as $k => $item) {
      if (is_array($item)) {
        $form['registration'][$k]['#disabled'] = TRUE;
      }
    }
    foreach ($form['email'] as $k => $item) {
      if (is_array($item)) {
        $form['email'][$k]['#disabled'] = TRUE;
      }
    }
  }
  if ($form_id == "user_login_block") {
    $form['#action'] = 'user/login';
    unset($form['name']);
    unset($form['pass']);
    unset($form['submit']);
    $form['links']['#value'] = '<a href="https://' . $_SERVER['HTTP_HOST'] . filter_xss(urldecode(request_uri()), array()) . '">Login</a>';
  }

  if ($form_id == "user_login") {
    drupal_goto('https://' . $_SERVER['SERVER_NAME'] . base_path());
  }

  if ($form_id == "user_profile_form") {
    if (isset($form['account']['name'])) {
      $form['account']['name']['#type'] = 'hidden';
    }
    unset($form['account']['pass']);
  }
}

/**
 * Implementation of hook_help().
 */
function cosign_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t("Allows users to authenticate via Cosign.");

    case "admin/help#cosign":
      return '<p>' . t("Allows users to authenticate via Cosign") . '</p>';
  }
}

/**
 * Logs a user out through cosign.
 */
function cosign_logout() {
  global $user;

  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  /***********************************************
   * bdr - since it is possible to have valid    *
   *    cosign login but not be in the "users"   *
   *    table, one might need to do a cosgin     *
   *    logout but not possess a Drupal "session *
   *    so check before doing a session_destroy  *
   **********************************************/
  // Destroy the current session:
  if (isset($user)) {
    session_destroy();
    $_SESSION = array();
  }

  module_invoke_all('user', 'logout', NULL, $user);

  // Load the anonymous user
  $user = drupal_anonymous_user();

  $default_logout_path = 'https://' . $_SERVER[ 'SERVER_NAME' ] . '/cgi-bin/logout';
  $default_logout_to =   'http://' . $_SERVER[ 'SERVER_NAME' ] . base_path();

  $logout_path = variable_get('cosign_logout_path', $default_logout_path);
  $logout_to = variable_get('cosign_logout_to', $default_logout_to);

  drupal_goto($logout_path . '?' . $logout_to);

  return TRUE;
}

function cosign_theme() {
  $path = drupal_get_path('module', 'cosign');

  return array(
    'cosign_logout_link' => array(
      'arguments' => array(),
    ),
    'cosign_login_link' => array(
      'arguments' => array(),
    ),
    'cosign_status' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function cosign_block($op = 'list', $delta = 'logout') {
  global $user;

  switch ($op) {
    case 'list':
      $blocks['cosign_login_logout']["info"] = t("Cosign status and login/logout");
      return $blocks;
    case 'save':
      return;
    case 'configure':
         return;
    case 'view': default:
      switch ($delta) {
        case 'cosign_login_logout':
          $block['content'] = theme('cosign_status');
          break;
      }
  }

  return $block;
}

function theme_cosign_status() {
  global $user;
  if (in_array('authenticated user', $user->roles)) {
    $content = theme('cosign_logout_link');
  } else {
    $content = theme('cosign_login_link');
  }

  return $content;
}

function theme_cosign_logout_link() {
  global $user;
  $content = t("logout ").l($user->name, "logout");
  return $content;
}

function theme_cosign_login_link() {
  $content = l("Login", "https://".$_SERVER['HTTP_HOST'].request_uri());
  return $content;
}

/**
 * Utility function to disable the cosign module.
 */
function _cosign_disable() {
  module_disable('cosign');
  drupal_set_message(t('Cosign module has been disabled'));
}

/**
 * Implementation of hook_enable().
 */
function cosign_enable() {
  $errmsg = '';
  $realm = '';

  if (isset($_SERVER['REMOTE_REALM'])) {
    $realm = '@' . $_SERVER['REMOTE_REALM'];
  }

  // This is a fresh install, don't bother copying users
  if (basename($_SERVER['SCRIPT_NAME']) == "install.php") {
    drupal_set_message(t('Cosign module has been enabled'));
    return TRUE;
  }

   /***********************************************
    * bdr - For the SwBack code, let's return at
    *       this point because we don't want all 
    *       this other stuff to happen          
    **********************************************/
  return TRUE;

  // look for REMOTE_USER, only enable if it's set
  $cosign_user = $_SERVER['REMOTE_USER'];
  if (!isset($cosign_user) || empty($cosign_user)) {
    _cosign_disable();
    drupal_error_handler(1, 'Could not detect your username from ' .
      '$_SERVER[\'REMOTE_USER\'], cosign was not enabled<br />',
      __FILE__, __LINE__, 0);
    return FALSE;
  }

  // is REMOTE_USER registered as a local user?
  $sql = "SELECT uid, name FROM {users} WHERE name='%s'";
  $local_result = db_query($sql, $cosign_user);
  $local_user = db_fetch_object($local_result);

  /*
   * REMOTE_USER isn't locally registered, so delete the admin user
   * and insert (create) a new admin based on the cosign user
   */
  if (empty($local_user)) {
    $del_sql = 'DELETE FROM {users} WHERE uid=1';
    if (!db_query($del_sql)) {
      $errmsg .= 'unable to delete old admin user ';
    }

    $ins_sql = "INSERT INTO {users} (uid, name, mail, created, status) VALUES(%d, '%s', '%s', %d, %d)";
    if (!db_query($ins_sql, 1, $_SERVER['REMOTE_USER'], $_SERVER['REMOTE_USER'] . $realm,
      time(), 1)) {
      $errmsg .= 'unable to create new admin user ';
    }
  }
  /*
   * REMOTE_USER is locally registered, but isn't the admin user, so delete
   * the admin user and update cosign user's local account to admin
   */
  elseif ($local_user->uid != 1) {
    $del_sql = 'DELETE FROM {users} WHERE uid=1';
    if (!db_query($del_sql)) {
      $errmsg .= 'unable to delete old admin user ';
    }

    $upd_sql = "UPDATE {users} SET uid=1 WHERE name='%s'";
    if (!db_query($upd_sql, $_SERVER['REMOTE_USER'])) {
      $errmsg .= 'unable to update your user to admin ';
    }
  }

  if (!empty($errmsg)) {
    drupal_set_message(
      t("There was an error when initializing cosign: $errmsg"));
    _cosign_disable();
    return FALSE;
  }

  // copy all users from the user table into the authmap table
  $result = db_query('SELECT uid, name FROM {users} WHERE ' .
    'uid > 0 AND name NOT IN (SELECT authname FROM {authmap})');

  while ($user_info = db_fetch_object($result)) {
    if (!empty($user_info->name)) {
      db_query(
        "INSERT INTO {authmap} (authname, uid, module) " . "VALUES ('%s', %d, '%s')",
        $user_info->name,
        $user_info->uid, 'cosign');
    }
  }

  drupal_set_message('Warning: All users mentioned in the user
    table have been copied into the authmap table. This
    means that any pre-existing local users have been
    converted to <b>user' . $realm . '</b>.  This may cause a
    mis-identification, and potential security issue if
    you had a user registered locally, and that name is
    mapped to someone else when using cosign.' .
    $_SERVER['REMOTE_USER'], 'status');

  return TRUE;
}
